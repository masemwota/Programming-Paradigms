object functional {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
	  /**
	  * PROBLEM 1
	  */
		def compose[T] (f: T => T, g: T =>T): T=>T =
		{
		   def r(x: T): T = f(g(x));
		   r _
		}                                 //> compose: [T](f: T => T, g: T => T)T => T
		
		/**
		* PROBLEM 2
		* Self-composition iterator combinator
		*/
		
		//def selfIter[T](f: T=>T, n: Int) = f composed with itself n times.
		def id[T](x: T): T = x            //> id: [T](x: T)T
		
		def selfIter[T] (f: T => T, n: Int): T => T =
		{
				if(n == 0) id _
				else if(n == 1) compose(f, id)
				//else if(n == 2) compose(f, f)
				else selfIter(compose(f, id) , n-1)
		}                                 //> selfIter: [T](f: T => T, n: Int)T => T
		
		def inc(x: Double) = x + 1        //> inc: (x: Double)Double
		inc(4)                            //> res0: Double = 5.0
		 
		selfIter(inc, 0) (10)             //> res1: Double = 10.0
		selfIter(inc, 2) (4)              //> res2: Double = 5.0
		selfIter(inc, 4) (5)              //> res3: Double = 6.0
		
		def double(x: Double) = 2 * x     //> double: (x: Double)Double
		double(2)                         //> res4: Double = 4.0
		
		selfIter(double, 0) (2)           //> res5: Double = 2.0
		selfIter(double, 1) (2)           //> res6: Double = 4.0
		selfIter(double, 2) (2)           //> res7: Double = 4.0
		selfIter(double, 3) (2)           //> res8: Double = 4.0
}