object functional {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
	  /**
	  * PROBLEM 1
	  */
		def compose[T] (f: T => T, g: T =>T): T=>T =
		{
		   def r(x: T): T = f(g(x));
		   r _
		}                                 //> compose: [T](f: T => T, g: T => T)T => T
		
		/**
		* PROBLEM 2
		* Self-composition iterator combinator
		*/
				
		//def selfIter[T](f: T=>T, n: Int) = f composed with itself n times.
		def id[T](x: T): T = x            //> id: [T](x: T)T
		
		def selfIter[T] (f: T => T, n: Int): T => T =
		{
				if(n == 0) id _
				else compose(selfIter(f, n-1), f)
		}                                 //> selfIter: [T](f: T => T, n: Int)T => T
		
		def inc(x: Double) = x + 1        //> inc: (x: Double)Double
	
		 
		selfIter(inc, 0) (10)             //> res0: Double = 10.0
		selfIter(inc, 2) (4)              //> res1: Double = 6.0
		selfIter(inc, 4) (5)              //> res2: Double = 9.0
		selfIter(inc, 5) (5)              //> res3: Double = 10.0
		
		
		def double(x: Double) = 2 * x     //> double: (x: Double)Double
		
		selfIter(double, 0) (2)           //> res4: Double = 2.0
		selfIter(double, 2) (2)           //> res5: Double = 8.0
		selfIter(double, 2) (3)           //> res6: Double = 12.0
		selfIter(double, 3) (2)           //> res7: Double = 16.0
		selfIter(double, 3) (3)           //> res8: Double = 24.0
		selfIter(double, 3) (5)           //> res9: Double = 40.0
		selfIter(double, 4) (1)           //> res10: Double = 16.0
		
		
		/**
		*	PROBLEM 3
		* Counts elements
		*/
		
		//Write a function called countPass that counts the number of elements in an array of elements of type T that pass a test of type T=>Boolean.
		//make it recursive
		def countPass[T](vals: Array[T], test: T => Boolean): Int =
		{
				//if(test(vals(0))) 1
				//else countPass(vals, test)
				
				def countP(place: Int): Int =
				{
						if(test(vals(place))) 1
						else countP(place -1)
				}
				countP(vals.size-1)
		}                                 //> countPass: [T](vals: Array[T], test: T => Boolean)Int
		
		def odd(n: Int) = n % 2 != 0      //> odd: (n: Int)Boolean
		def pal(n: String) = (n == n.reverse)
                                                  //> pal: (n: String)Boolean
		countPass(Array(1,2,3,4,5), odd)  //> java.lang.ArrayIndexOutOfBoundsException: 5
                                                  //| 	at scala.runtime.ScalaRunTime$.array_apply(ScalaRunTime.scala:55)
                                                  //| 	at functional$.countP$1(functional.scala:61)
                                                  //| 	at functional$.countPass$1(functional.scala:64)
                                                  //| 	at functional$.$anonfun$main$1(functional.scala:69)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$anonfun$$ex
                                                  //| ecute$1(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:76)
                                                  //| 	at functional$.main(functional.scala:1)
                                                  //| 	at functional.main(functional.scala)
		countPass(Array("mom", "dad", "dog","bro"), pal)
		
		
		/**
		* 	PROBLEM 4
		* Recur combinator
		*/
	
		def recur(baseVal: Int, combine: (Int, Int) => Int): Int => Int =
		{
				def rec(n: Int): Int =
				{
						if(n == 0) baseVal
						else combine(n, rec(n-1))
				}
				
				rec
		}
		//factorial
		recur(1, _*_)(4)
		recur(1, _*_)(5)
		recur(1, _*_)(10)
		
		//triangle
		recur(0, _+_)(4)
		recur(0, _+_)(5)
		recur(0, _+_)(10)
		
		
		
		/**
		*	PROBLEM 5
		* De-Optionize
		*/
		
		def sqrt(x: Double): Option[Double] =
		if (x < 0) None else Some(math.sqrt(x))
		
		sqrt(100)
		sqrt(-100)
		
		def parseDigits(digits: String): Option[Int] =
   		if (digits.matches("[0-9]*")) Some(digits.toInt) else None
		
		
		def sqrt2(x: Double): Double =
			sqrt(x) match
			{
				case None => throw new Exception("bad input")
				case Some(result) => result
			}
			
		
		//the code
		//S is stuff you don't care about
		
		/*
		def deOptionize[S,T](f: S => Option[T]): S => T =
		{
			f_ match
			{
				case None[S,T] => throw new Exception("bad input")
				case Some(result) => result
			}
		}*/
		
		/*
		def deOptionize[T](f: T => Option[T]): T => T =
		{
			//val result = f
			f(S_) match
			{
				case None => throw new Exception("bad input")
				case Some(result) => result
			}
			
			if f is None
		}
		
		
		val sqrt3 = deOptionize(sqrt)
		
		sqrt3(100)
		sqrt3(-100)
		
		*/
		
		try {
			println(sqrt2(100))
			println(sqrt2(-100))
		} catch {
				case e: Exception => println(e)
		}
		
}