object dds {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  /**
  *	PROBLEM 1
  * CONTROL LOOP: a tail recursive implementation of controlLoop
  */
  def controlLoop[S](state: S, cycle: Int, halt: (S, Int)=> Boolean, update: (S, Int)=>S): S =
  {
  			if (halt(state, cycle)) state
  			else controlLoop(update(state, cycle), cycle + 1, halt, update)
  }                                               //> controlLoop: [S](state: S, cycle: Int, halt: (S, Int) => Boolean, update: (S
                                                  //| , Int) => S)S
  
  
  /**
  * 	PROBLEM 2
  POPULATION GROWTH: asexually reproducing pond of amoebas.
  */
  
  //A pond of amoebas reproduces asexually until the pond's carrying capacity is reached.
  //More specifically, the initial population of one doubles every week until it exceeds 105.
  //Use your controlLoop function to compute the size of the final population.
	
	val capacity = 10e5;                      //> capacity  : Double = 1000000.0
	def updatePop(currentPop: Int, numWeeks: Int) = (currentPop * 2)
                                                  //> updatePop: (currentPop: Int, numWeeks: Int)Int
	
	def stopPop(currentPop: Int, numWeeks: Int) = (currentPop > capacity)
                                                  //> stopPop: (currentPop: Int, numWeeks: Int)Boolean
	
	controlLoop(50, 0, stopPop, updatePop)    //> res0: Int = 1638400
	controlLoop(500, 0, stopPop, updatePop)   //> res1: Int = 1024000
	
	
	/**
	* 		PROBLEM 3
	* 		Funding Roots of Functions
	* 		Give me any function and I'll guess the root of it
	*/
  	def solve(f: Double => Double): Double =
  {
  			val delta = 1e-5
  			
  			//helper
  			def df(x: Double) = (f(x + delta) - f(x)) / delta
  			
  			//halting function
  			def goodEnough(guess: Double, numGuesses: Int) =
  				math.abs(f(guess)) <= delta
  				
  			//update function
  			def improve(guess: Double, numGuesses: Int) =
  				guess - (f(guess) / df(guess))
  			
  			controlLoop(1.0, 0, goodEnough, improve)
  }                                               //> solve: (f: Double => Double)Double
  
  /**
  *	PROBLEM 4
  * Approximating Square Roots
  */
  def sqrt(n: Double) = solve((x: Double) => x * x - n)
                                                  //> sqrt: (n: Double)Double
  
  sqrt(100)                                       //> res2: Double = 10.000000000166429
  sqrt(49)                                        //> res3: Double = 7.000000142285558
  sqrt(36)                                        //> res4: Double = 6.000000005545686
}