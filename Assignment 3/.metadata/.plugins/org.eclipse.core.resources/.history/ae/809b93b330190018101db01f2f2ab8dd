object functional {
  println("Welcome to the Scala worksheet")
  
	  /**
	  * PROBLEM 1
	  */
		def compose[T] (f: T => T, g: T =>T): T=>T =
		{
		   def r(x: T): T = f(g(x));
		   r _
		}
		
		/**
		* PROBLEM 2
		* Self-composition iterator combinator
		*/
		
		//def selfIter[T](f: T=>T, n: Int) = f composed with itself n times.
		def id[T](x: T): T = x
		
		def selfIter[T] (f: T => T, n: Int): T => T =
		{
				if(n == 0) id _
				else if(n == 1) f
				//else if(n == 2) compose(f, f)
				//else if (n % 2 == 0) selfIter(compose(f, f), n-1)
				else selfIter(compose(f, f) , n-1)
		}
		
		def inc(x: Double) = x + 1
		inc(4)
		 
		selfIter(inc, 0) (10)
		selfIter(inc, 2) (4)
		selfIter(inc, 4) (5)
		selfIter(inc, 5) (5)
		
		def double(x: Double) = 2 * x
		double(2)
		
		selfIter(double, 0) (2)
		selfIter(double, 1) (2)
		selfIter(double, 2) (2)
		selfIter(double, 3) (2)
		selfIter(double, 2) (3)
		selfIter(double, 3) (3)
}