object functional {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
	  /**
	  * PROBLEM 1
	  */
		def compose[T] (f: T => T, g: T =>T): T=>T =
		{
		   def r(x: T): T = f(g(x));
		   r _
		}                                 //> compose: [T](f: T => T, g: T => T)T => T
		
		/**
		* PROBLEM 2
		* Self-composition iterator combinator
		*/

		//FIX THIS
				
		//def selfIter[T](f: T=>T, n: Int) = f composed with itself n times.
		def id[T](x: T): T = x            //> id: [T](x: T)T
		
		def selfIter[T] (f: T => T, n: Int): T => T =
		{
				if(n == 0) id _
				else if(n == 1) f
				else selfIter(compose(f, f) , n-1)
		}                                 //> selfIter: [T](f: T => T, n: Int)T => T
		
		def inc(x: Double) = x + 1        //> inc: (x: Double)Double
	
		 
		selfIter(inc, 0) (10)             //> res0: Double = 10.0
		selfIter(inc, 2) (4)              //> res1: Double = 6.0
		selfIter(inc, 4) (5)              //> res2: Double = 13.0
		selfIter(inc, 5) (5)              //> res3: Double = 21.0
		
		
		def double(x: Double) = 2 * x     //> double: (x: Double)Double
		
		selfIter(double, 0) (2)           //> res4: Double = 2.0
		selfIter(double, 2) (2)           //> res5: Double = 8.0
		selfIter(double, 2) (3)           //> res6: Double = 12.0
		selfIter(double, 3) (2)           //> res7: Double = 32.0
		selfIter(double, 3) (3)           //> res8: Double = 80.0
		selfIter(double, 3) (5)
		selfIter(double, 4) (1)           //> res9: Double = 256.0
		
		
		/**
		*	PROBLEM 3
		* Counts elements
		*/
		
		//Write a function called countPass that counts the number of elements in an array of elements of type T that pass a test of type T=>Boolean.
		//make it recursive
		def countPass[T](vals: Array[T], test: T => Boolean): Int =
		{
				0
		}                                 //> countPass: [T](vals: Array[T], test: T => Boolean)Int
		
		def odd(n: Int) = n % 2 != 0      //> odd: (n: Int)Boolean
		def pal(n: String) = (n == n.reverse)
                                                  //> pal: (n: String)Boolean
		countPass(Array(1,2,3,4,5), odd)  //> res10: Int = 0
		//countPass(Array("mom", "dad", "dog" "bro"), pal)
		
		
		/**
		* 	PROBLEM 4
		* Recur combinator
		*/
		
		def makeIter(baseVal: Int, combine: (Int, Int) => Int): Int => Int =
		{
				def f(n: Int): Int =
				{
						var result = baseVal
						for(count <- 1 to n)
							result = combine(count, result)
						result
				}
				f _
		}                                 //> makeIter: (baseVal: Int, combine: (Int, Int) => Int)Int => Int
		
		//iterative factorial
		def f(n: Int) =
		{
			var result = 1
			for(count <- 1 to n)
				result = count * result
			result
		}                                 //> f: (n: Int)Int
		
		
		//triangle function -- iterative summation
		def trian(n: Int) =
		{
			var result = 0
			for(count <- 1 to n)
				result = count + result
			result
		}                                 //> trian: (n: Int)Int
		
		val fact = makeIter(1, _*_)       //> fact  : Int => Int = functional$$$Lambda$22/566034357@7a5d012c
		
		fact(5)                           //> res11: Int = 120
		fact(4)                           //> res12: Int = 24
		
		val tri = makeIter(0, (n: Int, m: Int) => n + m)
                                                  //> tri  : Int => Int = functional$$$Lambda$22/566034357@2ed94a8b
		
		tri(5)                            //> res13: Int = 15
		tri(4)                            //> res14: Int = 10
		
		
		
		/*
		def recur(baseVal: Int, combine: (Int, Int) => Int): Int => Int =
		{
				//
		}
		*/
		
		/**
		*	PROBLEM 5
		* De-Optionize
		*/
		
		def sqrt(x: Double): Option[Double] =
		if (x < 0) None else Some(math.sqrt(x))
                                                  //> sqrt: (x: Double)Option[Double]
		
		sqrt(100)                         //> res15: Option[Double] = Some(10.0)
		sqrt(-100)                        //> res16: Option[Double] = None
		
		def sqrt2(x: Double): Double =
			sqrt(x) match
			{
				case None => throw new Exception("bad input")
				case Some(result) => result
			}                         //> sqrt2: (x: Double)Double
			
		try {
			println(sqrt2(100))
			println(sqrt2(-100))
		} catch {
				case e: Exception => println(e)
		}                                 //> 10.0
                                                  //| java.lang.Exception: bad input
		
		//the code
		//S is stuff you don't care about
		
		/*
		def deOptionize[S,T](f: S => Option[T]): S => T =
		{
				
		}
		
		val sqrt3 = deOptionize(sqrt)
		
		sqrt3(100)
		sqrt3(-100)
		
		*/
		
}